@model CheckoutBillingAddressModel
@using Nop.Core;
@inject IWebHelper webHelper

@{
    var storeLocation = webHelper.GetStoreLocation();
}

<div class="checkout-data">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop, additionalData = Model })
  
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="section select-billing-address">

            <div class="custom-control custom-radio">
                    <input class="custom-control-input" id="billing-address-select" name="billing-address-select" onclick="Billing.toggleUseBillingAddress(this)" type="checkbox" value="true">
                    <label class="custom-control-label" for="billing-address-select">Select a billing address from your address book</label>
                </div>
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            @if (Model.InvalidExistingAddresses.Count > 0)
            {
                <label class="min-amount-warning">
                    @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                </label>
            }
            <div id="select-billing-address" class="opc-select-address-container" @if (Model.ShipToSameAddress) {<text> style="display:none;" </text> }>
            
                <select name="billing_address_id" id="billing-address-select" class="address-select"
                    title="" onchange="Billing.resetBillingForm();Billing.setDefaultCountry(@(Model.BillingNewAddress.DefaultCountryId??0));Billing.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        addressLine += ", " + address.AddressLine;
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                </select>

                <button id="edit-billing-address-button" type="button" class="button-1" style="display: none" onclick="Billing.editAddress('@(storeLocation)checkout/GetAddressById/'); return false;">@T("Common.Edit")</button>

                <button id="delete-billing-address-button" type="button" class="button-1" style="display: none" onclick="Billing.deleteAddress('@(storeLocation)checkout/DeleteEditBillingAddress/'); return false;">@T("Common.Delete")</button>
        
            </div>
        </div>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle, additionalData = Model })
    
     <div class="section bill-to-same-address">

            <div class="custom-control custom-radio custom-control-inline" style="display:none">
                @Html.CheckBoxFor(x => x.ShipToSameAddress, new { @class = "custom-control-input", onclick= "Billing.toggleUseSameAddress(this)" })
                <label class="custom-control-label" asp-for="ShipToSameAddress">Billing address is the same as shipping address</label>
            </div>
            <div class="custom-control custom-radio custom-control-inline">
                <input class="custom-control-input" id="new-billing-address" name="new-billing-address" onclick="Billing.toggleNewBilling(this)" type="checkbox" value="false">
                <label class="custom-control-label" for="new-billing-address">Enter new billing address.</label>
            </div>
        </div>

    <div class="section new-billing-address" id="billing-new-address-form" style="display:flex !important">
        @if (Model.EuVatEnabled)
        {
            <div class="inputs">
                <label asp-for="VatNumber" asp-postfix=":"></label>
                @if (Model.EuVatEnabledForGuests)
                {
                    <input asp-for="VatNumber" />
                    <span asp-validation-for="VatNumber"></span>
                }
                else
                {
                    <span class="vat-number-warning">
                        @T("Checkout.VatNumber.Disabled", Url.RouteUrl("CustomerInfo"))
                    </span>
                }
            </div>
        }
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom, additionalData = Model })
</div>

<script asp-location="Footer">
    $(function () {
        $("#checkout-step-billing .section.bill-to-same-address").find("input[type='checkbox']").on("click", function () {
            if ($(this).attr("checked")) {
                $("#checkout-step-billing .section.bill-to-different-address").hide();
            }
            else {
                $("#checkout-step-billing .section.bill-to-different-address").show();
            }
        });

        if ($("#billing-address-select-dd").val() == "") {
            $("#new-billing-address").trigger("click");
        }

        /** Fix for bill to same as shipping showing up when pick up in store is selected **/

        // This call fixes ui on billing address form validation errors after Continue button is clicked
        FixBillingShippingSame();

        // This observer fixes the ui whenever the accordion shows the billing address section - forward and backward through checkout process
        var observer = new MutationObserver(function (mutations) {
            FixBillingShippingSame();
        });
        var target = document.querySelector('#checkout-step-billing');
        observer.observe(target, {
            attributes: true
        });
        /** End Fix for billing address same as shipping **/

    });

    function FixBillingShippingSame() {
        if ($("#PickUpInStore").val() === "true") {
            $("div:has(> #ShipToSameAddress)").hide();
            $("#new-billing-address").click();
        }
    }
</script>