@model CheckoutShippingAddressModel
@using Nop.Core;
@inject IWebHelper webHelper
@using Nop.Web.Models.Checkout;
@{
    bool IsPickupOnly = Model.PickupPointsModel.PickupInStoreOnly;
    string ShowPickupPointsForm = (Model.PickupPointsModel.PickupInStoreOnly ? "style=display:block" : "style=display:none");
    string ShowShippingAddressesForm = (Model.PickupPointsModel.PickupInStoreOnly ? "style=display:none" : "style=display:block");
    string CheckPickupPointsInput = (Model.PickupPointsModel.PickupInStoreOnly ? ", @checked='checked'" : "");
    string CheckHomeDeliveryInput = (Model.PickupPointsModel.PickupInStoreOnly ? "" : ", @checked='checked'");
}
@{
    var storeLocation = webHelper.GetStoreLocation();
}
<div class="checkout-data">
    @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
    {
        @await Html.PartialAsync("_PickupPoints", Model.PickupPointsModel)
        <script>
            $(function() {
                $(document).unbind('checkout_toggle_pickup_in_store');
                $(document).on('checkout_toggle_pickup_in_store', function (e) {
                    if (e.checked) {
                        $('#shipping-addresses-form').hide();
                        $('#edit-shipping-address-buttons').hide();
                    } else {
                        $('#shipping-addresses-form').show();
                        $('#edit-shipping-address-buttons').show();
                    }
                });
            });
        </script>
    }

    <div class="section pickup-in-store">
        @*<p class="selector">
                    @Html.CheckBoxFor(x => x.PickUpInStore, new { @onclick = "Shipping.togglePickUpInStore(this)" })
                    <label for="@Html.FieldIdFor(model => model.PickUpInStore)">
                        @T("Checkout.PickupPoints").Text
                    </label>
                </p>
                <p class="description">
                    <i>@T("Checkout.PickupPoints.Description")</i>
                </p>*@

        <div class="custom-control custom-radio custom-control-inline">
            @Html.CheckBoxFor(x => x.PickupPointsModel.PickupInStore, new { @onclick = "Shipping.togglePickUpInStore()", @class = "custom-control-input", @checked = CheckPickupPointsInput })

            <label class="custom-control-label" asp-for="PickupPointsModel">
                @T("Checkout.PickupPoints").Text<br />
                <i>@T("Checkout.PickupPoints.Description")</i>
            </label>
        </div>
        @if (!Model.PickupPointsModel.PickupInStoreOnly)
        {
            <div class="custom-control custom-radio custom-control-inline">
                <input class="custom-control-input" id="HomeDelivery" name="HomeDelivery" onclick="Shipping.toggleHomeDelivery()" type="checkbox" value="false" checked="@CheckHomeDeliveryInput">
                <label class="custom-control-label" for="HomeDelivery">
                    Home Delivery<br />
                    <span class="shipping-option-description">
                        <span class="shipping-note">
                            Save $5 when you order $60 or more. Delivery may not be available in all locations
                        </span><br />
                    </span>
                </label>
            </div>
            if (!Model.IsGuest)
            {
                <div class="custom-control custom-radio custom-control-inline">
                    @Html.CheckBoxFor(x => x.IsRecurringOrder, new { @onclick = "Shipping.toggleRecurringOrder()", @class = "custom-control-input" })
                    <label class="custom-control-label" asp-for="IsRecurringOrder">
                        Recurring Order<br />
                        <span class="shipping-option-description">
                            <span class="shipping-note">
                                Create an order which will automatically repeat after a certain amount of time.
                            </span><br />
                        </span>
                    </label>
                </div>
            }
        }
    </div>

    
    @if (!Model.PickupPointsModel.PickupInStoreOnly)
    {
        <div class="custom-control custom-radio custom-control-inline">
            <input class="custom-control-input" id="HomeDelivery" name="HomeDelivery" onclick="Shipping.toggleHomeDelivery()" type="checkbox" value="false" checked="@CheckHomeDeliveryInput">
            <label class="custom-control-label" for="HomeDelivery">
                Home Delivery<br />
                <span class="shipping-option-description">
                    <span class="shipping-note">
                        Save $5 when you order $60 or more. Delivery may not be available in all locations
                    </span><br />
                </span>
            </label>
        </div>
        if (!Model.IsGuest)
        {
            <div class="custom-control custom-radio custom-control-inline">
                @Html.CheckBoxFor(x => x.IsRecurringOrder, new { @onclick = "Shipping.toggleRecurringOrder()", @class = "custom-control-input" })
                <label class="custom-control-label" asp-for="IsRecurringOrder">
                    Recurring Order<br />
                    <span class="shipping-option-description">
                        <span class="shipping-note">
                            Create an order which will automatically repeat after a certain amount of time.
                        </span><br />
                    </span>
                </label>
            </div>
        }
    }

    @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
    {
        <div class="shipping-addresses" id="shipping-addresses-form">
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressTop, additionalData = Model })
            @if (Model.ExistingAddresses.Count > 0)
            {
                <div class="section select-shipping-address">
                    <label for="shipping-address-select">@T("Checkout.SelectShippingAddressOrEnterNewOne")</label>
                    @if (Model.InvalidExistingAddresses.Count > 0)
                    {
                        <label class="min-amount-warning">
                            @string.Format(T("Checkout.Addresses.Invalid").Text, Model.InvalidExistingAddresses.Count)
                        </label>
                    }
                    <div class="opc-select-address-container">
                        <select name="shipping_address_id" id="shipping-address-select" class="address-select"
                                title="" onchange="Shipping.newAddress(this.value, @Model.SelectedBillingAddress)">
                            @foreach (var address in Model.ExistingAddresses)
                            {
                                var addressLine = "";
                                addressLine += address.FirstName;
                                addressLine += " " + address.LastName;
                                addressLine += ", " + address.AddressLine;
                                //how should we render "FormattedCustomAddressAttributes" here?
                                <option value="@(address.Id)">@(addressLine)</option>
                            }
                            <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                        </select>

                        <button id="edit-shipping-address-button" type="button" class="button-1" style="display: none" onclick="Shipping.editAddress('@(storeLocation)checkout/GetAddressById/'); return false;">@T("Common.Edit")</button>

                        <button id="delete-shipping-address-button" type="button" class="button-1" style="display: none" onclick="Shipping.deleteAddress('@(storeLocation)checkout/DeleteEditShippingAddress/'); return false;">@T("Common.Delete")</button>
                    </div>
                </div>
            }
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressMiddle, additionalData = Model })
            <div class="section new-shipping-address" id="shipping-new-address-form">
                <div class="enter-address">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    @{
                        var dataDictAddress = new ViewDataDictionary(ViewData);
                        dataDictAddress.TemplateInfo.HtmlFieldPrefix = "ShippingNewAddress";
                        @await Html.PartialAsync("_CreateOrUpdateAddress", Model.ShippingNewAddress, dataDictAddress)
                    }
                </div>
            </div>
            @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.OpCheckoutShippingAddressBottom, additionalData = Model })
        </div>
    }
</div>