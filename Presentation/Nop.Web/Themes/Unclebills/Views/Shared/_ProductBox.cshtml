@model ProductOverviewModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure

@inject CatalogSettings catalogSettings
@inject IWorkContext workContext

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item" data-productid="@Model.Id">
    <div class="picture">
        @if (Model.PictureModels.Count > 1)
        {
            <div class="swiper" id="swiper-@Model.Id" dir="@Html.GetUIDirection(!await Html.ShouldUseRtlThemeAsync())">
                <div class="swiper-wrapper">
                    @foreach (var picture in Model.PictureModels)
                    {
                        <a class="swiper-slide" href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture.Title">
                            <img alt="@picture.AlternateText" src="@picture.ImageUrl" title="@picture.Title" />
                        </a>
                    }
                </div>
                <!-- Add Pagination -->
                <div class="swiper-pagination"></div>
            </div>

            <script asp-location="Footer">
                new Swiper('#swiper-@(Model.Id)', {
                pagination: {
                clickable: true,
                el: '.swiper-pagination',
                },
                });
            </script>
        }
        else
        {
            var picture = Model.PictureModels.FirstOrDefault();
            <a href="@(Url.RouteUrl<Product>(new { SeName = Model.SeName }))" title="@picture?.Title">
                <img alt="@picture?.AlternateText" src="@picture?.ImageUrl" title="@picture?.Title" />
            </a>
        }
    </div>
    <div class="details">
        <div class="row">
            <div class="col-sm-8">
                @{
                    var productService = EngineContext.Current.Resolve<Nop.Services.Catalog.IProductService>();

                    var product = productService.GetProductByIdAsync(Model.Id);

                    var productModelFactory = EngineContext.Current.Resolve<Nop.Web.Factories.IProductModelFactory>();

                    var productDetails = await productModelFactory.PrepareProductDetailsModelAsync(product.Result);


                    if (productDetails.ProductManufacturers?.Any() == true)
                    {
                        var _manufacturerService = EngineContext.Current.Resolve<Nop.Services.Catalog.IManufacturerService>();
                       // var manufacturer = await _manufacturerService.GetProductManufacturersByProductIdAsync(Model.Id);

                        var _urlRecordService = EngineContext.Current.Resolve<Nop.Services.Seo.IUrlRecordService>();

                        var _localizationService = EngineContext.Current.Resolve<Nop.Services.Localization.ILocalizationService>();

                        var manufacturers = await (await _manufacturerService.GetProductManufacturersByProductIdAsync(product.Id))
                        .SelectAwait(async pm =>
                        {
                            var manufacturer = await _manufacturerService.GetManufacturerByIdAsync(pm.ManufacturerId);
                                    var modelMan = new ManufacturerBriefInfoModel
                            {
                                Id = manufacturer.Id,
                                Name = await _localizationService.GetLocalizedAsync(manufacturer, x => x.Name),
                                SeName = await _urlRecordService.GetSeNameAsync(manufacturer)
                            };

                            return modelMan;
                        }).ToListAsync();

                        if (manufacturers.Count() > 0)
                        {
                            <div class="manufacturers"><h3 class="value"><span>@manufacturers.FirstOrDefault().Name</span></h3></div>

                        }
                    }
                }
            </div>

            <div class="col-sm-4">
                <div class="prices">
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteTopicUrl("shippinginfo"))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
            </div>
        </div>
        <h2 class="product-title">
            <a href="@(Url.RouteUrl<Product>(new {SeName = Model.SeName }))">@Model.Name</a>
        </h2>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="description" @(catalogSettings.ShowShortDescriptionOnCatalogPages ? "" : "data-short-description=none")>
            @Html.Raw(Model.ShortDescription)
        </div>
        
    </div>
</div>
